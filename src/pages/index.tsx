import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useSocket } from "@/providers/socket-provider";
import { useEffect, useRef, useState } from "react";
import { InitialData, UpdateData } from "@everymatrix/om-connector";


export default function Home() {

  const { socket } = useSocket();

  const consoleBodyRef = useRef<HTMLDivElement>(null);
  const [messages, setMessages] = useState<string[]>([]);

  useEffect(() => {
    if (socket) {
      socket.on("connect", () => {
        setMessages((prevMessages) => [...prevMessages, `Successfully connected to server`]);
      });

      socket.on("connect_error", (err: any) => {
        setMessages((prevMessages) => [...prevMessages, `Error: ${err.message}`]);
      });

      socket.on("notifyInitialDump", (initialData: InitialData) => {
        // further processing
        setMessages((prevMessages) => [...prevMessages, `InitialData received: batchId[${initialData.batchId}] batchesLeft[${initialData.batchesLeft}] dumpComplete[${initialData.dumpComplete}] entitiesAmount[${initialData.entities.length}]`]);
      });

      socket.on("notifyEntityUpdates", (updateData: UpdateData) => {
        // further processing
        setMessages((prevMessages) => [...prevMessages, `UpdateData received: createdTime[${updateData.createdTime}] batchId[${updateData.batchId}] changesAmount[${updateData.changes.length}]`]);
      });
    }

    return () => {
      if (socket) {
        socket.off("notifyEntityUpdates");
        socket.off("notifyEntityUpdates");
      }
    };
  }, [socket]);


  useEffect(() => {
    // scroll to the bottom of console
    if (consoleBodyRef.current) {
      consoleBodyRef.current.scrollTop = consoleBodyRef.current.scrollHeight;
    }
  }, [messages]);

  return (
    <>
      <Head>
        <title>Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles['main']}>
        <div className={styles['console']}>
          <div className={styles['console-head']}>
            <div className={styles['console-title']}>Client</div>
            <div className={styles['console-actions']}>
              <div className={`${styles['console-action']} ${styles['console-action-min']}`}></div>
              <div className={`${styles['console-action']} ${styles['console-action-max']}`}></div>
              <div className={`${styles['console-action']} ${styles['console-action-close']}`}></div>
            </div>
          </div>
          <div className={styles['console-body']} ref={consoleBodyRef}>
            {messages.map((message, index) => (
              <div key={index} className={styles["console-text"]}>
                {message}
                {index === messages.length - 1 ? (
                  <span className={styles['console-input']}>_</span>
                ) : null}
              </div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}
